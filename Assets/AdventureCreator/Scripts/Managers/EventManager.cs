/*
 *
 *	Adventure Creator
 *	by Chris Burton, 2013-2016
 *	
 *	"EventManager.cs"
 * 
 *	This script handles events that are run at certain times during a game.
 *	They can be subscribed to by custom script, to aid with third-party integration.
 * 
 */

using UnityEngine;
using System.Collections;

namespace AC
{

	/**
	 * Handles events that are run at certain times during a game.
 	 * They can be subscribed to by custom script, to aid with third-party integration.
	 */
	public class EventManager : MonoBehaviour
	{

		// Speech

		/** A delegate for the OnStartSpeech and OnEndSpeechScroll events */
		public delegate void Delegate_StartSpeech (AC.Char speakingCharacter, string speechText, int lineID);
		/** A delegate for the OnStopSpeech event */
		public delegate void Delegate_StopSpeech (AC.Char speakingCharacter);
		/** An event triggered whenever a new line of dialogue begins */
		public static event Delegate_StartSpeech OnStartSpeech;
		/** An event triggered whenever a line of dialogue ends */
		public static event Delegate_StopSpeech OnStopSpeech;
		/** An event triggered whenever a line of dialogue starts scrolling */
		public static event Delegate_StartSpeech OnStartSpeechScroll;
		/** An event triggered whenever a line of dialogue stops scrolling */
		public static event Delegate_StartSpeech OnEndSpeechScroll;

		/** <summary>Triggers the OnStartSpeech event.</summary>
		 * <param name = "speakingCharacter">The character who is speaking. If null, the line is considered to be a narration</param>
		 * <param name = "speechText">The dialogue text</param>
		 * <param name = "lineID">The ID number of the speech line, as generated by the SpeechManager</param>
		 */
		public void Call_OnStartSpeech (AC.Char speakingCharacter, string speechText, int lineID)
		{
			if (OnStartSpeech != null)
			{
				OnStartSpeech (speakingCharacter, speechText, lineID);
			}
		}


		/** <summary>Triggers the OnStopSpeech event.</summary>
		 * <param name = "speakingCharacter">The character who is speaking. If null, the line is considered to be a narration</param>
		 */
		public void Call_OnStopSpeech (AC.Char speakingCharacter)
		{
			if (OnStopSpeech != null)
			{
				OnStopSpeech (speakingCharacter);
			}
		}


		/** <summary>Triggers the OnStartSpeechScroll event.</summary>
		 * <param name = "speakingCharacter">The character who is speaking. If null, the line is considered to be a narration</param>
		 * <param name = "speechText">The dialogue text</param>
		 * <param name = "lineID">The ID number of the speech line, as generated by the SpeechManager</param>
		 */
		public void Call_OnStartSpeechScroll (AC.Char speakingCharacter, string speechText, int lineID)
		{
			if (OnStartSpeechScroll != null)
			{
				OnStartSpeechScroll (speakingCharacter, speechText, lineID);
			}
		}


		/** <summary>Triggers the OnEndSpeechScroll event.</summary>
		 * <param name = "speakingCharacter">The character who is speaking. If null, the line is considered to be a narration</param>
		 * <param name = "speechText">The dialogue text</param>
		 * <param name = "lineID">The ID number of the speech line, as generated by the SpeechManager</param>
		 */
		public void Call_OnEndSpeechScroll (AC.Char speakingCharacter, string speechText, int lineID)
		{
			if (OnEndSpeechScroll != null)
			{
				OnEndSpeechScroll (speakingCharacter, speechText, lineID);
			}
		}


		// GameState

		/** A delegate for the OnEnterGameState and OnExitGameState events */
		public delegate void Delegate_ChangeGameState (GameState gameState);
		/** An event triggered whenever a GameState is entered */
		public static event Delegate_ChangeGameState OnEnterGameState;
		/** An event triggered whenever a GameState is exited */
		public static event Delegate_ChangeGameState OnExitGameState;

		/**
		 * <summary>Triggers the OnEnterGameState and OnExitGameState events.</summary>
		 * <param name = "oldGameState">The previous GameState (Normal, Cutscene, DialogOptions, Paused)</param>
		 */
		public void Call_OnChangeGameState (GameState oldGameState)
		{
			if (OnExitGameState != null)
			{
				OnExitGameState (oldGameState);
			}
			if (OnEnterGameState != null)
			{
				OnEnterGameState (KickStarter.stateHandler.gameState);
			}
		}


		// Hotspots

		/** A delegate for the OnHotspotSelect and OnHotspotDeselect events */
		public delegate void Delegate_ChangeHotspot (Hotspot hotspot);
		/** A delegate for the OnHotspotInteract event */
		public delegate void Delegate_InteractHotspot (Hotspot hotspot, AC.Button button);
		/** An event triggered whenever a Hotspot is selected */
		public static Delegate_ChangeHotspot OnHotspotSelect;
		/** An event triggered whenever a Hotspot is de-selected */
		public static Delegate_ChangeHotspot OnHotspotDeselect;
		/** An event triggered whenever a Hotspot's button is interacted with */
		public static Delegate_InteractHotspot OnHotspotInteract;
		/** An event triggered whenever a Hotspot is double-clicked */
		public static Delegate_ChangeHotspot OnDoubleClickHotspot;

		/**
		 * <summary>Triggers either the OnHotspotSelect or OnHotspotDeselect event.</summary>
		 * <param name = "hotspot">The Hotspot that was affected</param>
		 * <param name = "wasSelected">If True, the OnHotspotSelect event will be triggered. If False, the OnHotspotDeselect Event will be triggered.</param>
		 */
		public void Call_OnChangeHotspot (Hotspot hotspot, bool wasSelected)
		{
			if (hotspot == null) return;

			if (wasSelected && OnHotspotSelect != null)
			{
				OnHotspotSelect (hotspot);
			}
			else if (!wasSelected && OnHotspotDeselect != null)
			{
				OnHotspotDeselect (hotspot);
			}
		}

		/**
		 * <summary>Triggers the OnHotspotInteract event.</summary>
		 * <param name = "hotspot">The Hotspot the was interacted with</param>
		 * <param name = "button">The specific Button on the Hotspot that was interacted with. This will be null if the interaction is unhandled.</param>
		 */
		public void Call_OnInteractHotspot (Hotspot hotspot, AC.Button button)
		{
			if (hotspot == null) return;

			if (OnHotspotInteract != null)
			{
				OnHotspotInteract (hotspot, button);
			}
		}


		/**
		 * <summary>Triggers the OnDoubleClickHotspot event, regardless of the Hotspot's doubleClickingHotspot variable.</summary>
		 * <param name = "hotspot">The Hotspot that was double-clicked.</param>
		 */
		public void Call_OnDoubleClickHotspot (Hotspot hotspot)
		{
			if (hotspot == null) return;

			if (OnDoubleClickHotspot != null)
			{
				OnDoubleClickHotspot (hotspot);
			}
		}


		// Menus

		/** A delegate for the OnMenuElementClick event */
		public delegate void Delegate_OnMenuElementClick (AC.Menu _menu, MenuElement _element, int _slot, int buttonPressed);
		/** A delegate for the OnMouseOverMenu event */
		public delegate void Delegate_OnMouseOverMenu (AC.Menu _menu, MenuElement _element, int _slot);
		/** An event triggered whenever a MenuElement inside a Menu is clicked */
		public static Delegate_OnMenuElementClick OnMenuElementClick;
		/** An event triggered whenever the mouse hovers over a new menu element */
		public static Delegate_OnMouseOverMenu OnMouseOverMenu;
		/** An event triggered once the Menus have been generated when the game begins */
		public static Delegate_Generic OnGenerateMenus;

		/**
		 * <summary>Triggers the OnMenuElementClick event.</summary>
		 * <param name = "_menu">The Menu that the clicked MenuElement is a part of</param>
		 * <param name = "_element">The MenuElement that was clicked on</param>
		 * <param name = "_slot">The slot index that was clicked, if the MenuElement consists of multiple slots (0 otherwise)</param>
		 * <param name = "_buttonPressed">Equals 1 if a left-click, or 2 if a right-click</param>
		 */
		public void Call_OnMenuElementClick (AC.Menu _menu, MenuElement _element, int _slot, int _buttonPressed)
		{
			if (OnMenuElementClick != null)
			{
				OnMenuElementClick (_menu, _element, _slot, _buttonPressed);
			}
		}


		/**
		 * <summary>Triggers the OnMouseOverMenuElement event.</summary>
		 * <param name = "_menu">The Menu that the mouse is over</param>
		 * <param name = "_element">The MenuElement that the mouse is over</param>
		 * <param name = "_slot">The slot index that the mouse is over, if the MenuElement consists of multiple slots (0 otherwise)</param>
		 */
		public void Call_OnMouseOverMenuElement (AC.Menu _menu, MenuElement _element, int _slot)
		{
			if (OnMouseOverMenu != null)
			{
				OnMouseOverMenu (_menu, _element, _slot);
			}
		}


		/**
		 * <summary>Triggers the OnGenerateMenus event.</summary>
		 */
		public void Call_OnGenerateMenus ()
		{
			if (OnGenerateMenus != null)
			{
				OnGenerateMenus ();
			}
		}


		// Saving

		/** A delegate for events that take no arguments and return null */
		public delegate void Delegate_Generic ();
		/** An event triggered before a save game file is created */
		public static Delegate_Generic OnBeforeSaving;
		/** An event triggered after a save game file is created */
		public static Delegate_Generic OnFinishSaving;
		/** An event triggered after an attempt to save a game fails */
		public static Delegate_Generic OnFailSaving;
		/** An event triggered before a save game file is loaded */
		public static Delegate_Generic OnBeforeLoading;
		/** An event triggered after a save game file is loaded */
		public static Delegate_Generic OnFinishLoading;
		/** An event triggered after an attempt to load a game fails */
		public static Delegate_Generic OnFailLoading;
		/** An event triggered before the variables in a save game file are imported */
		public static Delegate_Generic OnBeforeImporting;
		/** An event triggered after the variables in a save game file are imported */
		public static Delegate_Generic OnFinishImporting;
		/** An event triggered after an attempt to import a game fails */
		public static Delegate_Generic OnFailImporting;

		/**
		 * <summary>Triggers either the OnBeforeSaving, OnFinishSaving or OnFailSaving events.</summary>
		 * <param name = "fileAccessState">The state of the file access (Before, After, Fail)</param>
		 */
		public void Call_OnSave (FileAccessState fileAccessState)
		{
			if (fileAccessState == FileAccessState.Before && OnBeforeSaving != null)
			{
				OnBeforeSaving ();
			}
			else if (fileAccessState == FileAccessState.After && OnFinishSaving != null)
			{
				OnFinishSaving ();
			}
			else if (fileAccessState == FileAccessState.Fail && OnFailSaving != null)
			{
				OnFailSaving ();
			}
		}

		/**
		 * <summary>Triggers either the OnBeforeLoading, OnFinishLoading or OnFailLoading events.</summary>
		 * <param name = "fileAccessState">The state of the file access (Before, After, Fail)</param>
		 */
		public void Call_OnLoad (FileAccessState fileAccessState)
		{
			if (fileAccessState == FileAccessState.Before && OnBeforeLoading != null)
			{
				OnBeforeLoading ();
			}
			else if (fileAccessState == FileAccessState.After && OnFinishLoading != null)
			{
				OnFinishLoading ();
			}
			else if (fileAccessState == FileAccessState.Fail && OnFailLoading != null)
			{
				OnFailLoading ();
			}
		}

		/**
		 * <summary>Triggers either the OnBeforeImporting, OnFinishImporting or OnFailImporting events.</summary>
		 * <param name = "fileAccessState">The state of the file access (Before, After, Fail)</param>
		 */
		public void Call_OnImport (FileAccessState fileAccessState)
		{
			if (fileAccessState == FileAccessState.Before && OnBeforeImporting != null)
			{
				OnBeforeImporting ();
			}
			else if (fileAccessState == FileAccessState.After && OnFinishImporting != null)
			{
				OnFinishImporting ();
			}
			else if (fileAccessState == FileAccessState.Fail && OnFailImporting != null)
			{
				OnFailImporting ();
			}

		}


		// Player

		/** A delegate for the OnSetPlayer event */
		public delegate void Delegate_SetPlayer (Player player);
		/** An event triggered whenever a new Player is loaded into the scene */
		public static Delegate_SetPlayer OnSetPlayer;

		/** 
		 * <summary>Triggers the OnSetPlayer event.</summary>
		 * <param name = "player">The new Player object</param>
		 */
		public void Call_OnSetPlayer (Player player)
		{
			if (OnSetPlayer != null)
			{
				OnSetPlayer (player);
			}
		}


		// Inventory

		/** A delegate for the OnInventoryAdd, OnInventoryRemove and OnInventoryInteract events */
		public delegate void Delegate_ChangeInventory (InvItem invItem, int value);
		/** A delegate for the OnInventoryCombine events */
		public delegate void Delegate_CombineInventory (InvItem invItem, InvItem invItem2);
		/** A delegate for the OnInventorySelect and OnInventoryDeselect events */
		public delegate void Delegate_Inventory (InvItem _int);
		/** An event triggered whenever an item is added to the player's inventory */
		public static Delegate_ChangeInventory OnInventoryAdd;
		/** An event triggered whenever an item is removed from the player's inventory */
		public static Delegate_ChangeInventory OnInventoryRemove;
		/** An event triggered whenever an inventory item is selected by the player */
		public static Delegate_Inventory OnInventorySelect;
		/** An event triggered whenever an inventory item is de-selected by the player */
		public static Delegate_Inventory OnInventoryDeselect;
		/** An event triggered whenever an inventory item is interacted with */
		public static Delegate_ChangeInventory OnInventoryInteract;
		/** An event triggered whenever two inventory items are combined together */
		public static Delegate_CombineInventory OnInventoryCombine;

		/**
		 * <summary>Triggers either the OnInventoryAdd, OnInventoryRemove, OnInventorySelect or OnInventoryDeselect events.<summary>
		 * <param name = "invItem">The inventory item that was manipulated</param>
		 * <param name = "inventoryEventType">How the inventory item was manipulated (Add, Remove, Select, Deselect)</param>
		 * <param name = "amount">How many instances of the inventory item were affected, if appropriate</param>
		 */
		public void Call_OnChangeInventory (InvItem invItem, InventoryEventType inventoryEventType, int amount = 1)
		{
			if (invItem == null) return;

			if (inventoryEventType == InventoryEventType.Add && OnInventoryAdd != null)
			{
				OnInventoryAdd (invItem, amount);
			}
			else if (inventoryEventType == InventoryEventType.Remove && OnInventoryRemove != null)
			{
				OnInventoryRemove (invItem, amount);
			}
			else if (inventoryEventType == InventoryEventType.Select && OnInventorySelect != null)
			{
				OnInventorySelect (invItem);
			}
			else if (inventoryEventType == InventoryEventType.Deselect && OnInventoryDeselect != null)
			{
				OnInventoryDeselect (invItem);
			}
		}


		/**
		 * <summary>Triggers either the OnInventoryCombine or InventoryInteract events.</summary>
		 * <param name = "iconID">The ID number of the 'use' icon, as defined in CursorManager, if the item was used</param>
		 * <param name = "combineItem">The other inventory item, if the item was combined with another</param>
		 */
		public void Call_OnUseInventory (InvItem invItem, int iconID, InvItem combineItem = null)
		{
			if (invItem == null) return;

			if (OnInventoryCombine != null && combineItem != null)
			{
				OnInventoryCombine (invItem, combineItem);
			}
			else if (OnInventoryInteract != null && combineItem == null)
			{
				OnInventoryInteract (invItem, iconID);
			}
		}


		// Moveable objects
		
		/** A delegate for the Delegate_OnGrabMoveable and Delegate_OnDropMoveable events */
		public delegate void Delegate_OnMoveable (DragBase dragBase);
		/** An event triggered whenever a moveable object is picked up by the player */
		public static event Delegate_OnMoveable OnGrabMoveable;
		/** An event triggered whenever a moveable object is dropped by the player */
		public static event Delegate_OnMoveable OnDropMoveable;
		
		/** <summary>Triggers the OnGrabMoveable event.</summary>
		 * <param name = "dragBase">The object being picked up</param>
		 */
		public void Call_OnGrabMoveable (DragBase dragBase)
		{
			if (OnGrabMoveable != null)
			{
				OnGrabMoveable (dragBase);
			}
		}

		/**
		 * <summary>Triggers the OnDropMoveable event.</summary>
		 * <param name = "dragBase">The object being dropped</param>
		 */
		public void Call_OnDropMoveable (DragBase dragBase)
		{
			if (OnDropMoveable != null)
			{
				OnDropMoveable (dragBase);
			}
		}


		// Camera

		/** A delegate for the Delegate_OnSwitchCamera events */
		public delegate void Delegate_OnSwitchCamera (_Camera fromCamera, _Camera toCamera, float transitionTime);
		/** An event triggered whenever the MainCamera switches to a new _Camera */
		public static event Delegate_OnSwitchCamera OnSwitchCamera;
		
		/**
		 * <summary>Triggers the OnSwitchCamera event.</summary>
		 * <param name = "dragBase">The object being picked up</param>
		 */
		public void Call_OnSwitchCamera (_Camera fromCamera, _Camera toCamera, float transitionTime)
		{
			if (OnSwitchCamera != null)
			{
				OnSwitchCamera (fromCamera, toCamera, transitionTime);
			}
		}


		// Options

		/** A delegate for the Delegate_OnChangeLanguage event */
		public delegate void Delegate_OnChangeLanguage (int language);
		/** A delegate for the Delegate_OnChangeVolume event */
		public delegate void Delegate_OnChangeVolume (SoundType soundType, float volume);
		/** A delegate for the Delegate_OnChangeSubtitles event */
		public delegate void Delegate_OnChangeSubtitles (bool showSubtitles);
		/** An event triggered whenever the current language is changed */
		public static event Delegate_OnChangeLanguage OnChangeLanguage;
		/** An event triggered whenever the Music, Speech or SFX volumes are changed */
		public static event Delegate_OnChangeVolume OnChangeVolume;
		/** An event triggered whenever subtitles are turns on or off */
		public static event Delegate_OnChangeSubtitles OnChangeSubtitles;

		/**
		 * <summary>Triggers the OnChangeLanguage event.</summary>
		 * <param name = "language">The index number of the new language</param>
		 */
		public void Call_OnChangeLanguage (int language)
		{
			if (OnChangeLanguage != null)
			{
				OnChangeLanguage (language);
			}
		}

		/**
		 * <summary>Triggers the OnChangeLanguage event.</summary>
		 * <param name = "soundType">The SoundType that was changed (Music, SFX, Speech)</param>
		 * <param name = "volume">The new volume</param>
		 */
		public void Call_OnChangeVolume (SoundType soundType, float volume)
		{
			if (OnChangeVolume != null)
			{
				OnChangeVolume (soundType, volume);
			}
		}

		/**
		 * <summary>Triggers the OnChangeSubtitles event.</summary>
		 * <param name = "showSubtitles">If True, subtitles are now displayed.</param>
		 */
		public void Call_OnChangeSubtitles (bool showSubtitles)
		{
			if (OnChangeSubtitles != null)
			{
				OnChangeSubtitles (showSubtitles);
			}
		}


		// Scene management

		/** A delegate for the events that need no parameters */
		public delegate void Delegate_NoParameters ();
		/** An event triggered just before the active scene is changed */
		public static event Delegate_NoParameters OnBeforeChangeScene;
		/** An event triggered just after the active scene is changed */
		public static event Delegate_NoParameters OnAfterChangeScene;

		/**
		 * <summary>Triggers the OnBeforeChangeScene event.</summary>
		 */
		public void Call_OnBeforeChangeScene ()
		{
			if (OnBeforeChangeScene != null)
			{
				OnBeforeChangeScene ();
			}
		}

		/**
		 * <summary>Triggers the OnAfterChangeScene event.</summary>
		 */
		public void Call_OnAfterChangeScene ()
		{
			if (OnAfterChangeScene != null)
			{
				OnAfterChangeScene ();
			}
		}

	}

}